
import { GoogleGenAI, Modality, GenerateContentResponse } from '@google/genai';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const imageEditModel = 'gemini-2.5-flash-image';
const chatModel = 'gemini-2.5-flash';

interface ImageInput {
  mimeType: string;
  data: string; // base64 encoded string
}

const handleApiError = (error: unknown, context: 'headshot' | 'chat'): Error => {
  console.error(`Error in ${context} service:`, error);

  let errorMessage = 'An unexpected error occurred. Please try again.';

  if (error instanceof Error && error.message) {
    const lowerCaseMessage = error.message.toLowerCase();
    if (lowerCaseMessage.includes('quota') || lowerCaseMessage.includes('rate limit') || lowerCaseMessage.includes('resource_exhausted') || lowerCaseMessage.includes('429')) {
      errorMessage = 'You have sent too many requests. Please wait a moment and try again.';
    } else if (context === 'headshot') {
        errorMessage = 'Failed to generate headshot. Please try again.';
    } else {
        errorMessage = 'Failed to get a response from the chatbot. Please check the console for details.';
    }
  }

  return new Error(errorMessage);
};

export const generateHeadshot = async (
  image: ImageInput,
  prompt: string
): Promise<string> => {
  try {
    const response: GenerateContentResponse = await ai.models.generateContent({
      model: imageEditModel,
      contents: {
        parts: [
          {
            inlineData: {
              data: image.data,
              mimeType: image.mimeType,
            },
          },
          {
            text: `Based on the person in this image, ${prompt}`,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    throw new Error('No image was generated by the API.');
  } catch (error) {
    throw handleApiError(error, 'headshot');
  }
};


export const getChatResponse = async (prompt: string): Promise<string> => {
  try {
     const response = await ai.models.generateContent({
       model: chatModel,
       contents: prompt
     });
     return response.text;
  } catch (error)
  {
    throw handleApiError(error, 'chat');
  }
};
